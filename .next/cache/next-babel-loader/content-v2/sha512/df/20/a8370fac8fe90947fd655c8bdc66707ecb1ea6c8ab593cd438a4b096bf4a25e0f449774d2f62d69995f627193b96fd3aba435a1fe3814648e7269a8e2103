{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jordan/BlockFund/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jordan/BlockFund/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nvar web3;\n\nvar getProvider = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return window.web3.currentProvider.enable();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProvider() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nif (true && typeof window.web3 !== 'undefined') {\n  // means we are in browser, and metamask is running.\n  console.log(\"metamask op 1\");\n  web3 = new Web3(window.ethereum);\n  getProvider();\n} else {\n  // we are in the server, or user is not running metamask.\n  console.log(\"metamask op 2\");\n  var provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/11fb63f43c3b4774be075f9e477e0d8b');\n  web3 = new Web3(provider);\n}\n\nexport default web3;","map":null,"metadata":{},"sourceType":"module"}